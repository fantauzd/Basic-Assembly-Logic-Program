Microsoft (R) Macro Assembler Version 14.29.30152.0	    10/23/23 00:24:11
7Project 1 Elementary Arithmetic    (Proj1.fantauzd.asm	     Page 1 - 1


				TITLE Project 1 Elementary Arithmetic    (Proj1.fantauzd.asm)

				; Author:  Dominic Fantauzzo
				; Last Modified:  10/13/2023
				; OSU email address:  fantauzd@oregonstate.edu
				; Course number/section:  CS271 Section 400
				; Project Number:	1			Due Date:	10/23/2023
				; Description: This program displays the name of its creator and 
				;	  the program title on the output screen, prompts the user
				;	  to enter three numbers in strictly descending order,
				;	  calculates and display the sum and differences of these numbers,
				;	  and displays a closing message.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

 00000000 09 09 45 6C 65	intro_1      BYTE   "		Elementary Arithmetic	  by Dominic Fantauzzo",13,10,"**EC: Program repeats until the user chooses to quit.",13,10,"**EC: Program verifies the numbers are in desceding order.",13,10,0
	   6D 65 6E 74 61
	   72 79 20 41 72
	   69 74 68 6D 65
	   74 69 63 09 20
	   20 62 79 20 44
	   6F 6D 69 6E 69
	   63 20 46 61 6E
	   74 61 75 7A 7A
	   6F 0D 0A 2A 2A
	   45 43 3A 20 50
	   72 6F 67 72 61
	   6D 20 72 65 70
	   65 61 74 73 20
	   75 6E 74 69 6C
	   20 74 68 65 20
	   75 73 65 72 20
	   63 68 6F 6F 73
	   65 73 20 74 6F
	   20 71 75 69 74
	   2E 0D 0A 2A 2A
	   45 43 3A 20 50
	   72 6F 67 72 61
	   6D 20 76 65 72
	   69 66 69 65 73
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 61 72
	   65 20 69 6E 20
	   64 65 73 63 65
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2E 0D 0A 00
 000000A4 45 6E 74 65 72	prompt_1     BYTE   "Enter 3 non-negative numbers, such that A > B > C. I'll show you the sums and differences.",0
	   20 33 20 6E 6F
	   6E 2D 6E 65 67
	   61 74 69 76 65
	   20 6E 75 6D 62
	   65 72 73 2C 20
	   73 75 63 68 20
	   74 68 61 74 20
	   41 20 3E 20 42
	   20 3E 20 43 2E
	   20 49 27 6C 6C
	   20 73 68 6F 77
	   20 79 6F 75 20
	   74 68 65 20 73
	   75 6D 73 20 61
	   6E 64 20 64 69
	   66 66 65 72 65
	   6E 63 65 73 2E
	   00
 000000FF 46 69 72 73 74	promptForA   BYTE   "First number: ",0
	   20 6E 75 6D 62
	   65 72 3A 20 00
 0000010E 00000000		valueA       DWORD  ?
 00000112 53 65 63 6F 6E	promptForB   BYTE   "Second number: ",0
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000122 00000000		valueB       DWORD  ?
 00000126 54 68 69 72 64	promptForC   BYTE   "Third number: ",0
	   20 6E 75 6D 62
	   65 72 3A 20 00
 00000135 00000000		valueC       DWORD  ?
 00000139 49 20 68 6F 70	goodbye      BYTE   "I hope you enjoyed Elementary Arithmetic!  Feel free to go again!",0
	   65 20 79 6F 75
	   20 65 6E 6A 6F
	   79 65 64 20 45
	   6C 65 6D 65 6E
	   74 61 72 79 20
	   41 72 69 74 68
	   6D 65 74 69 63
	   21 20 20 46 65
	   65 6C 20 66 72
	   65 65 20 74 6F
	   20 67 6F 20 61
	   67 61 69 6E 21
	   00
 0000017B 45 52 52 4F 52	orderError	 BYTE   "ERROR: The numbers are not in descending order! Try again!",0
	   3A 20 54 68 65
	   20 6E 75 6D 62
	   65 72 73 20 61
	   72 65 20 6E 6F
	   74 20 69 6E 20
	   64 65 73 63 65
	   6E 64 69 6E 67
	   20 6F 72 64 65
	   72 21 20 54 72
	   79 20 61 67 61
	   69 6E 21 00
 000001B6 00000000		sumA_B       DWORD  ?
 000001BA 00000000		diffA_B      DWORD  ?
 000001BE 00000000		sumA_C       DWORD  ?
 000001C2 00000000		diffA_C      DWORD  ?
 000001C6 00000000		sumB_C       DWORD  ?
 000001CA 00000000		diffB_C      DWORD  ?
 000001CE 00000000		sumA_B_C     DWORD  ?
 000001D2 20 2B 20 00		addSign      BYTE   " + ",0
 000001D6 20 2D 20 00		subSign      BYTE   " - ",0
 000001DA 20 3D 20 00		eqSign       BYTE   " = ",0


 00000000			.code
 00000000			main PROC

				; introduction
 00000000  BA 00000000 R		mov   EDX, OFFSET intro_1
 00000005  E8 00000000 E		call  WriteString
 0000000A  E8 00000000 E		call  CrLf

				; get the data, checks if numbers are in descending order
 0000000F			_start:
 0000000F  BA 000000A4 R		mov   EDX, OFFSET prompt_1
 00000014  E8 00000000 E		call  WriteString
 00000019  E8 00000000 E		call  CrLf
 0000001E  E8 00000000 E		call  CrLf
 00000023  BA 000000FF R		mov   EDX, OFFSET promptForA          ; prompts user for the number A
 00000028  E8 00000000 E		call  WriteString
 0000002D  E8 00000000 E		call  ReadDec
 00000032  A3 0000010E R		mov   valueA, EAX                     ; stores it in variable
 00000037  E8 00000000 E		call  CrLf
 0000003C  BA 00000112 R		mov   EDX, OFFSET promptForB          ; prompts user for the number B
 00000041  E8 00000000 E		call  WriteString
 00000046  E8 00000000 E		call  ReadDec
 0000004B  A3 00000122 R		mov   valueB, EAX                     ; stores number B in variable
 00000050  39 05 0000010E R		CMP   valueA, EAX
 00000056  0F 8E 0000024E		JNG   _notdescending
 0000005C  E8 00000000 E		call  CrLf
 00000061  BA 00000126 R		mov   EDX, OFFSET promptForC          ; prompts user for the number C
 00000066  E8 00000000 E		call  WriteString
 0000006B  E8 00000000 E		call  ReadDec
 00000070  A3 00000135 R		mov   valueC, EAX                     ; stores number C in variable
 00000075  39 05 00000122 R		CMP   valueB, EAX
 0000007B  0F 8E 00000229		JNG   _notdescending
 00000081  E8 00000000 E		call  CrLf

				; calculate the required values
 00000086  A1 0000010E R		mov  EAX, valueA                     ; sets EAX reg to valueA
 0000008B  03 05 00000122 R		add  EAX, valueB
 00000091  A3 000001B6 R		mov  sumA_B, EAX                     ; stores sum of valueA and valueB in variable
 00000096  A1 0000010E R		mov  EAX, valueA                     ; resets EAX reg to valueA
 0000009B  2B 05 00000122 R		sub  EAX, valueB
 000000A1  A3 000001BA R		mov  diffA_B, EAX                    ; stores difference of valueA and valueB in variable
 000000A6  A1 0000010E R		mov  EAX, valueA                     ; repeats process for A and C
 000000AB  03 05 00000135 R		add  EAX, valueC
 000000B1  A3 000001BE R		mov  sumA_C, EAX
 000000B6  A1 0000010E R		mov  EAX, valueA
 000000BB  2B 05 00000135 R		sub  EAX, valueC
 000000C1  A3 000001C2 R		mov  diffA_C, EAX
 000000C6  A1 00000122 R		mov  EAX, valueB                     ; repeats process for B and C
 000000CB  03 05 00000135 R		add  EAX, valueC
 000000D1  A3 000001C6 R		mov  sumB_C, EAX
 000000D6  A1 00000122 R		mov  EAX, valueB
 000000DB  2B 05 00000135 R		sub  EAX, valueC
 000000E1  A3 000001CA R		mov  diffB_C, EAX
 000000E6  A1 0000010E R		mov  EAX, valueA
 000000EB  03 05 00000122 R		add  EAX, valueB
 000000F1  03 05 00000135 R		add  EAX, valueC
 000000F7  A3 000001CE R		mov  sumA_B_C, EAX                   ; stores sum of all three input values in variable

				; display the results
 000000FC  A1 0000010E R		mov   EAX, valueA                     
 00000101  E8 00000000 E		call  WriteDec
 00000106  BA 000001D2 R		mov   EDX, OFFSET addSign
 0000010B  E8 00000000 E		call  WriteString
 00000110  A1 00000122 R		mov   EAX, valueB
 00000115  E8 00000000 E		call  WriteDec
 0000011A  BA 000001DA R		mov   EDX, OFFSET eqSign
 0000011F  E8 00000000 E		call  WriteString
 00000124  A1 000001B6 R		mov   EAX, sumA_B                     ; with previous calls, outputs "valueA + valueB = sumA_B"
 00000129  E8 00000000 E		call  WriteDec
 0000012E  E8 00000000 E		call  CrLF
 00000133  A1 0000010E R		mov   EAX, valueA
 00000138  E8 00000000 E		call  WriteDec
 0000013D  BA 000001D6 R		mov   EDX, OFFSET subSign
 00000142  E8 00000000 E		call  WriteString
 00000147  A1 00000122 R		mov   EAX, valueB
 0000014C  E8 00000000 E		call  WriteDec
 00000151  BA 000001DA R		mov   EDX, OFFSET eqSign
 00000156  E8 00000000 E		call  WriteString
 0000015B  A1 000001BA R		mov   EAX, diffA_B
 00000160  E8 00000000 E		call  WriteDec                      ; with previous calls, outputs "valueA - valueB = diffA_B"
 00000165  E8 00000000 E		call  CrLf
 0000016A  A1 0000010E R		mov   EAX, valueA
 0000016F  E8 00000000 E		call  WriteDec
 00000174  BA 000001D2 R		mov   EDX, OFFSET addSign
 00000179  E8 00000000 E		call  WriteString
 0000017E  A1 00000135 R		mov   EAX, valueC
 00000183  E8 00000000 E		call  WriteDec
 00000188  BA 000001DA R		mov   EDX, OFFSET eqSign
 0000018D  E8 00000000 E		call  WriteString
 00000192  A1 000001BE R		mov   EAX, sumA_C
 00000197  E8 00000000 E		call  WriteDec                      ; with previous calls, outputs "valueA + valueC = sumA_C"
 0000019C  E8 00000000 E		call  CrLF
 000001A1  A1 0000010E R		mov   EAX, valueA
 000001A6  E8 00000000 E		call  WriteDec
 000001AB  BA 000001D6 R		mov   EDX, OFFSET subSign
 000001B0  E8 00000000 E		call  WriteString
 000001B5  A1 00000135 R		mov   EAX, valueC
 000001BA  E8 00000000 E		call  WriteDec
 000001BF  BA 000001DA R		mov   EDX, OFFSET eqSign
 000001C4  E8 00000000 E		call  WriteString
 000001C9  A1 000001C2 R		mov   EAX, diffA_C
 000001CE  E8 00000000 E		call  WriteDec                     ; with previous calls, outputs "valueA - valueC = diffA_C"
 000001D3  E8 00000000 E		call  CrLf
 000001D8  A1 00000122 R		mov   EAX, valueB
 000001DD  E8 00000000 E		call  WriteDec
 000001E2  BA 000001D2 R		mov   EDX, OFFSET addSign
 000001E7  E8 00000000 E		call  WriteString
 000001EC  A1 00000135 R		mov   EAX, valueC
 000001F1  E8 00000000 E		call  WriteDec
 000001F6  BA 000001DA R		mov   EDX, OFFSET eqSign
 000001FB  E8 00000000 E		call  WriteString
 00000200  A1 000001C6 R		mov   EAX, sumB_C
 00000205  E8 00000000 E		call  WriteDec                    ; with previous calls, outputs "valueB + valueC = sumB_C"
 0000020A  E8 00000000 E		call  CrLF
 0000020F  A1 00000122 R		mov   EAX, valueB
 00000214  E8 00000000 E		call  WriteDec
 00000219  BA 000001D6 R		mov   EDX, OFFSET subSign
 0000021E  E8 00000000 E		call  WriteString
 00000223  A1 00000135 R		mov   EAX, valueC
 00000228  E8 00000000 E		call  WriteDec
 0000022D  BA 000001DA R		mov   EDX, OFFSET eqSign
 00000232  E8 00000000 E		call  WriteString
 00000237  A1 000001CA R		mov   EAX, diffB_C
 0000023C  E8 00000000 E		call  WriteDec                   ; with previous calls, outputs "valueB - valueC = diffB_C"
 00000241  E8 00000000 E		call  CrLf
 00000246  A1 0000010E R		mov   EAX, valueA
 0000024B  E8 00000000 E		call  WriteDec
 00000250  BA 000001D2 R		mov   EDX, OFFSET addSign
 00000255  E8 00000000 E		call  WriteString
 0000025A  A1 00000122 R		mov   EAX, valueB
 0000025F  E8 00000000 E		call  WriteDec
 00000264  E8 00000000 E		call  WriteString
 00000269  A1 00000135 R		mov   EAX, valueC
 0000026E  E8 00000000 E		call  WriteDec
 00000273  BA 000001DA R		mov   EDX, OFFSET eqSign
 00000278  E8 00000000 E		call  WriteString
 0000027D  A1 000001CE R		mov   EAX, sumA_B_C
 00000282  E8 00000000 E		call  WriteDec
 00000287  E8 00000000 E		call  CrLf                     ; with previous calls, outputs "valueA + valueB + valueC = sumA_B_C"
					
				; say goodbye
 0000028C  E8 00000000 E		call  CrLf
 00000291  BA 00000139 R		mov   EDX, OFFSET goodbye
 00000296  E8 00000000 E		call  WriteString
 0000029B  E8 00000000 E		call  CrLf
 000002A0  E8 00000000 E		call  CrLf
 000002A5  E9 FFFFFD65			JMP   _start

				; return message when user inputs are not in descending order
 000002AA			_notdescending:
 000002AA  E8 00000000 E		call  CrLF
 000002AF  BA 0000017B R		mov   EDX, OFFSET orderError
 000002B4  E8 00000000 E		call  WriteString
 000002B9  E8 00000000 E		call  CrLf
 000002BE  E8 00000000 E		call  CrLf
 000002C3  E9 FFFFFD47			JMP   _start

					Invoke ExitProcess,0	; exit to operating system
 000002C8  6A 00	   *	    push   +000000000h
 000002CA  E8 00000000 E   *	    call   ExitProcess
 000002CF			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30152.0	    10/23/23 00:24:11
7Project 1 Elementary Arithmetic    (Proj1.fantauzd.asm	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001DE Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002CF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000002CF Public STDCALL
  _start . . . . . . . . . . . .	L Near	 0000000F _TEXT	
  _notdescending . . . . . . . .	L Near	 000002AA _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
addSign  . . . . . . . . . . . .	Byte	 000001D2 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
diffA_B  . . . . . . . . . . . .	DWord	 000001BA _DATA	
diffA_C  . . . . . . . . . . . .	DWord	 000001C2 _DATA	
diffB_C  . . . . . . . . . . . .	DWord	 000001CA _DATA	
eqSign . . . . . . . . . . . . .	Byte	 000001DA _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000139 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
orderError . . . . . . . . . . .	Byte	 0000017B _DATA	
promptForA . . . . . . . . . . .	Byte	 000000FF _DATA	
promptForB . . . . . . . . . . .	Byte	 00000112 _DATA	
promptForC . . . . . . . . . . .	Byte	 00000126 _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 000000A4 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
subSign  . . . . . . . . . . . .	Byte	 000001D6 _DATA	
sumA_B_C . . . . . . . . . . . .	DWord	 000001CE _DATA	
sumA_B . . . . . . . . . . . . .	DWord	 000001B6 _DATA	
sumA_C . . . . . . . . . . . . .	DWord	 000001BE _DATA	
sumB_C . . . . . . . . . . . . .	DWord	 000001C6 _DATA	
valueA . . . . . . . . . . . . .	DWord	 0000010E _DATA	
valueB . . . . . . . . . . . . .	DWord	 00000122 _DATA	
valueC . . . . . . . . . . . . .	DWord	 00000135 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
